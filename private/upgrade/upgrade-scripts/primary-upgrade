#!/bin/sh

set -e

test -n "${DB_SYSTEM_ID}"
test -n "${OLD}"
test -n "${NEW}"

PGDATA=/var/lib/postgresql/data

PGDATAOLD=${PGDATA}
PGDATANEW=${PGDATA}.new
PGBINOLD=/usr/lib/postgresql/${OLD}/bin
PGBINNEW=/usr/lib/postgresql/${NEW}/bin
export PGDATAOLD PGDATANEW PGBINOLD PGBINNEW

PRESERVE_FILES="postgresql.conf postgresql.base.conf postgresql.auto.conf pg_hba.conf pg_ident.conf"

if [ -d "${PGDATA}" ]; then
    detected_ver=$(cat $PGDATA/PG_VERSION 2>/dev/null)
    if [ "$detected_ver" != "$NEW" ]; then
        if [ "$detected_ver" != "$OLD" ]; then
            echo "[-] Database version mismatch: $OLD (expected) != $detected_ver (detected)"
            exit 1
        fi

        old_id=$(${PGBINOLD}/pg_controldata ${PGDATA} | sed -n -r -e 's/^Database system identifier:[[:space:]]*//p')
        if [ "$old_id" != "$DB_SYSTEM_ID" ]; then
            echo "Database system identifier mismatch: $DB_SYSTEM_ID (expected) != $old_id (detected)"
            exit 2
        fi

        rm -rf "${PGDATANEW}"

        ${PGBINNEW}/initdb -D "${PGDATANEW}" -E "utf8" --data-checksums

        if ! ${PGBINNEW}/pg_upgrade --link; then
            echo "[-] Failed upgrading"
            exit 3
        fi

        for f in ${PRESERVE_FILES}; do
            if [ -f "${PGDATAOLD}/${f}" ]; then
                cp "${PGDATAOLD}/${f}" "${PGDATANEW}/${f}"
            fi
        done

        echo "[+] Upgrade successful"
        rm -f ./delete_old_cluster.sh
        rm -rf "${PGDATA}"
    fi
fi

if [ -d "${PGDATANEW}" ]; then
    if [ -d "${PGDATA}" ]; then
        echo "[-] Upgrade incosistency, PGDATA and PGDATANEW both exists"
        exit 4
    fi

    mv "${PGDATANEW}" "${PGDATA}"
fi

if [ "$(cat $PGDATA/PG_VERSION 2>/dev/null)" != "$NEW" ]; then
    echo "[-] Upgrade failed, new DB has wrong PG_VERSION"
    exit 5
fi

echo "Upgraded database has new Database system identifier:"
echo ""

${PGBINNEW}/pg_controldata ${PGDATA} | sed -n -r -e 's/^Database system identifier:[[:space:]]*/ /p'
